{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Demo ALB stack with EC2 instance (web-site) and ALB, connected to demoVPC stack (network)",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
			"Default":"test"
        },
        "SSHLocation": {
            "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
        },
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "InstanceCount": {
            "Description": "Number of EC2 instances to launch",
            "Type": "Number",
            "Default": "1"
        }
    },
    "Mappings": {
        "Region2Examples": {
            "us-east-1": {
                "Examples": "https://s3.amazonaws.com/cloudformation-examples-us-east-1"
            }
        },
        "AWSInstanceType2Arch": {
            "t2.micro": {
                "Arch": "HVM64"
            }
          },
 		"AWSRegionArch2AMI" : {
     			"us-east-1"        : {"HVM64" : "ami-759bc50a"}
    }
    },
    "Resources": {
		  "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {        
				"SecurityGroups" : [ {"Ref" : "InstanceSecurityGroup"}],
				"Subnets": [{"Fn::ImportValue" :{"Fn::Sub": "demoVPC-PublicSub1"} }, {"Fn::ImportValue" :{"Fn::Sub": "demoVPC-PublicSub2"} }]									
					}								       
        },
        "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroup"
                        }
                    }
                ],
             "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
             "Port": "80",
             "Protocol": "HTTP"
            }
        },
        "ALBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 3,
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 5,			
                "VpcId": {
                     "Fn::ImportValue" :{"Fn::Sub": "demoVPC-VPCId" }
				},
				"Targets" : 
         			 [  { "Id" : { "Ref" : "LaunchConfig"}, "Port" : 80 }
      
        			],
				"TargetGroupAttributes" :
         			 [  { "Key" : "stickiness.enabled", "Value" : "true" },
            				{ "Key" : "stickiness.type", "Value" : "lb_cookie" },
           				{ "Key" : "stickiness.lb_cookie.duration_seconds", "Value" : "180" }
       			 ]
            }
        },
		
      "LaunchConfig" : {
      		"Type" : "AWS::EC2::Instance",
      		"Metadata" : {
       			 "Comment" : "Install a simple application",
        			 "AWS::CloudFormation::Init" : {
          			"config" : {
            				"files" : {
              				"/etc/nginx/conf.d/letsencrypt.conf" : {
               				 "content" : { "Fn::Join" : ["", [
                 			"server {\n",
                 			"\tlisten 80;\n",
                  			"\tlisten 443 ssl;\n",
                  			"\tserver_name ", {"Fn::Join": ["",["http://", {"Fn::GetAtt": ["ApplicationLoadBalancer","DNSName" ]
                        			}
                    			]
               			 ]}, ";\n",
                  			"\tssl_certificate /etc/letsencrypt/live/", {"Fn::Join": ["",["http://", {"Fn::GetAtt": ["ApplicationLoadBalancer","DNSName" ]
                        			}
                    			]
               			 ]}, "/fullchain.pem;\n",
                  			"\tssl_certificate_key /etc/letsencrypt/live/", {"Fn::Join": ["",["http://", {"Fn::GetAtt": ["ApplicationLoadBalancer","DNSName" ]
                       	 	 }
                    			]
               			 ]}, "/privkey.pem;\n",
                  			"\troot /usr/share/nginx/html;\n",
                  			"\tindex index.html index.htm;\n",
                  			"}\n"
                			]]},
                			"mode"  : "000644",
                			"owner" : "root",
                			"group" : "root"
              			},
              			"/var/www/html/index.html" : {
                			"content" : { "Fn::Join" : ["", [
                  				"<!DOCTYPE html>\n",
                  				"<html><head>\n",
                  				"<title>Welcome to nginx!</title>\n",
                  				"<style> body { width: 800px; margin: 0 auto; } </style>\n",
                  				"</head>\n",
                  				"<body>\n",
                  				"<h1>Let's Encrypt</h1>\n",
                  				"<h2>Let's Encrypt</h2>\n",
				  				"<h3>Let's Encrypt</h3>\n",
                  				"</body></html>"
                				]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
			  
				"/etc/letsencrypt/example.com.conf":{
					"content" : { "Fn::Join" : ["", [
						"domains","=", {"Fn::Join": ["",["http://", {"Fn::GetAtt": ["ApplicationLoadBalancer","DNSName" ]
                        }
                    ]
                ]}, ";\n",
					"rsa-key-size = 4096\n",
					"server = https://acme-v01.api.letsencrypt.org/directory\n",
					"email = honcharenkoy90@gmail.com\n", 
					"text = True"
				  ]]},
				 "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              }
 
            },
							"services" : {
              					"sysvinit" : {
               				 		"nginx"    : { "enabled" : "true", "ensureRunning" : "true", 
													"files" : [ "/etc/nginx/conf.d/letsencrypt.conf" ]},
									"letsencrypt": {"enabled" : "true", "ensureRunning" : "true", 
													"files" : [ "/etc/letsencrypt/configs/example.com.conf" ]}
									
              }
            }

            	
          }
        }
      },
      "Properties" : {
		"NetworkInterfaces" : [{
			"SubnetId": {
                     "Fn::ImportValue" :{"Fn::Sub": "demoVPC-PublicSub1" }
				},
			"AssociatePublicIpAddress" : "true",
			"DeviceIndex" : "0",
        		"DeleteOnTermination" : "true",
			"GroupSet" : [ { "Ref" : "InstanceSecurityGroup" } ]
		}],
        "KeyName" : { "Ref" : "KeyName" },
        "InstanceType" : { "Ref" : "InstanceType" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" },
                                          "Arch" ] } ] },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
			"apt-get install -y nginx\n",
			"service nginx stop\n",
			"apt-get install -y python\n",
			"add-apt-repository ppa:certbot/certbot\n",
			"apt-get -y update\n",
			"apt-get install -y python-certbot-nginx\n",
			"certbot  --config /etc/letsencrypt/example.com.conf certonly\n",
			"service nginx restart\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT10M"
        }
      }
    },

        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access and SSH access",
                "SecurityGroupIngress" : [ {
         		 "IpProtocol" : "tcp",
          		 "FromPort" : "22",
          		 "ToPort" : "22",
          		 "CidrIp" : { "Ref" : "SSHLocation"}
        },
        {
          		"IpProtocol" : "tcp",
          		"FromPort" : "80",
          		"ToPort" : "80",
          		"CidrIp" : "0.0.0.0/0"
        } ,
		{
          		"IpProtocol" : "tcp",
          		"FromPort" : "443",
          		"ToPort" : "443",
          		"CidrIp" : "0.0.0.0/0"
        } ],
				"SecurityGroupEgress" : [ {
         		 "IpProtocol" : "tcp",
          		 "FromPort" : "22",
          		 "ToPort" : "22",
          		 "CidrIp" :  "0.0.0.0/0"
        },
        {
          		"IpProtocol" : "tcp",
          		"FromPort" : "80",
          		"ToPort" : "80",
          		"CidrIp" : "0.0.0.0/0"
        } ,
				 {
          		"IpProtocol" : "tcp",
          		"FromPort" : "443",
          		"ToPort" : "443",
          		"CidrIp" : "0.0.0.0/0"
        } ],
       		 "VpcId": {
                     "Fn::ImportValue" :{"Fn::Sub": "demoVPC-VPCId" }
				}
           
            }
        }
    },
    "Outputs": {
        "URL": {
            "Description": "URL of the website",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ApplicationLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            }
        },
		"InstanceSecGroup":{
			"Description": "Security Group of instance",
            "Value": { "Ref" : "InstanceSecurityGroup" }
    }
}
}